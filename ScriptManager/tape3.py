import sys
import cv2
import numpy as np
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__blur_type = BlurType.Box_Blur
        self.__blur_radius = 6.306306306306296

        self.blur_output = None

        self.__hsv_threshold_input = self.blur_output
        self.__hsv_threshold_hue = [0.0, 180.0]
        self.__hsv_threshold_saturation = [0.0, 47.0]
        self.__hsv_threshold_value = [252.0, 255.0]

        self.hsv_threshold_output = None



    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Blur0:
        self.__blur_input = source0
        (self.blur_output) = self.__blur(self.__blur_input, self.__blur_type, self.__blur_radius)

        # Step HSV_Threshold0:
        self.__hsv_threshold_input = self.blur_output
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)


    @staticmethod
    def __blur(src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if(type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif(type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif(type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    class Line:

        def __init__(self, x1, y1, x2, y2):
            self.x1 = x1
            self.y1 = y1
            self.x2 = x2
            self.y2 = y2

        def length(self):
            return np.sqrt(pow(self.x2 - self.x1, 2) + pow(self.y2 - self.y1, 2))

        def angle(self):
            return np.degrees(np.arctan2(self.y2 - self.y1, self.x2 - self.x1))


#finds the midpoint between the coordinates of the centers of two boxes
def midpoint(box_list):
    
    if len(box_list) < 2:
        return 0
    
    x1, y1 = box_list[0][0]
    x2, y2 = box_list[1][0]

    x = abs((x1 - x2)/2)
    y = abs((y1 - y2)/2)

    if x1 > x2:
        x += x2
    else:
        x += x1

    if y1 > y2:
        y += y2
    else:
        y += y1

    midx, midy = int(x), int(y)

    return (midx, midy)

#Defines bounding boxes from contours
def find_boxes(contours):

    box_list=[]
    t = 0
        
    for cnt in contours:
        rect = cv2.minAreaRect(cnt)
            
        width = rect[1][0]
        length = rect[1][1]
            
        area = math.floor(width * length)
            
        if t == 2:
            break
            
        if area > size_threshold:
                
            if width > 2*length or length > 2*width:
                
                #adds the area as an element
                rect = rect + (area,)
                box_list.append(rect)
                
                t+=1

    return box_list


from picamera.array import PiRGBArray
from picamera import PiCamera

BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')

g = GripPipeline()

#Minimum area of a bounding box
size_threshold = 4000

def main(stop_message):
    
    def connection(stop_message):
    
        x = stop_message[0]
        
        print("[*]Thread 1 queue:", x)
        
        if x != 1:
            print("[*]Thread 1 exiting")
            cam.close()
            sys.exit()
    
    cam = PiCamera()
    cam.resolution = (640, 480)
    cam.framerate = 32
    rawCap = PiRGBArray(cam, size=(640, 480))

    for frame in cam.capture_continuous(rawCap, format="bgr", use_video_port=True):

        box_list=[]

        frame = frame.array
        #Runs the frame through the grip pipeline
        g.process(frame)
        threshed_frame = g.hsv_threshold_output
        
        ret, thresh = cv2.threshold(threshed_frame, 127, 255, cv2.THRESH_BINARY)
        im2, contours, heirarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        try:
            box_list = find_boxes(contours)

        except Exception as e:
            print(e)


        for rect in box_list:
            
            #Converts box into coordinates
            box = cv2.boxPoints(rect[:3])
            box = np.int0(box)
            
            angle = math.floor(rect[2])
            area = rect[3]
            
            print("Angle:", -angle)
            print("Area:", area)
            
            print("|----------|")
            
            #Draws bounding boxes
            frame = cv2.drawContours(frame, [box], 0, (0, 0, 255), 2)

        mid = midpoint(box_list)

        #Draws midpoint if one exists
        if mid != 0:
            
            cv2.circle(frame, (mid[0], mid[1]), 5, (0, 0, 255), -1)
            print("Midpoint:", mid)
        

        if box_list != []:
            print("************************")

        cv2.imshow('frame', frame)

        rawCap.truncate(0)
        
        connection(stop_message)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break






